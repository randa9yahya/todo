{"version":3,"sources":["component/listItem.js","App.js","serviceWorker.js","index.js"],"names":["listItem","prpos","listItems","items","map","item","className","key","type","id","value","text","onChange","e","upDate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","props","state","isSwitchOn","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","filteritems","filter","isOn","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAKe,SAASA,EAASC,GAE7B,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEhC,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACA,2BAAOC,KAAK,OACZC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,OAAOD,EAAEE,OAAOL,MAAOL,EAAKE,QAG1C,8BACI,kBAAC,IAAD,CAAkBS,KAAK,QACvBC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAKzC,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,I,mBCvBbmB,IAAQC,IAAIC,K,IAgGGC,E,kDA9Fb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,YAAY,EACZxB,MAAM,GACNyB,YAAY,CACVjB,KAAK,GACLJ,IAAI,KAGR,EAAKsB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKZ,WAAa,EAAKA,WAAWY,KAAhB,gBAClB,EAAKhB,OAAS,EAAKA,OAAOgB,KAAZ,gBAbE,E,wDAgBNjB,GACVmB,KAAKC,SAAS,CACZL,YAAY,CACVjB,KAAME,EAAEE,OAAOL,MACfH,IAAI2B,KAAKC,W,8BAMLtB,GACNA,EAAEuB,iBACF,IAAMC,EAAUL,KAAKN,MAAME,YAC3B,GAAmB,KAAhBS,EAAQ1B,KAAW,CACpB,IAAMR,EAAK,sBAAO6B,KAAKN,MAAMvB,OAAlB,CAAyBkC,IACtCL,KAAKC,SAAS,CACZ9B,MAAOA,EACPyB,YAAY,CACVjB,KAAK,GACLJ,IAAI,S,iCAMCA,GACT,IAAM+B,EAAcN,KAAKN,MAAMvB,MAAMoC,QAAO,SAAAlC,GAAI,OAAIA,EAAKE,MAAOA,KAChEyB,KAAKC,SAAS,CACZ9B,MAAMmC,M,6BAIH3B,EAAMJ,GAAK,IAAD,OACTJ,EAAS6B,KAAKN,MAAMvB,MAC1BA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,GAEZ,EAAKsB,SAAS,CAChB9B,MAAMA,S,+BAID,IAAD,OACAqC,EAAOR,KAAKN,MAAMC,WACxB,OACE,oCACA,yBAAKrB,UAAU,WACf,yBAAKA,UAAakC,EAAO,aAAe,aACtC,6BACA,4BAAQlC,UAAkB,qBACxBW,QAAS,kBAAM,EAAKgB,SAAS,CAACN,YAAaa,MAC1CA,EAAO,IAAM,MAKlB,yBAAKlC,UAAU,OACrB,0BAAMA,UAAU,OAAOmC,SAAUT,KAAKD,SAEpC,2BAAOzB,UAAU,WAAWE,KAAK,OAAQkC,YAAY,WACrDhC,MAAOsB,KAAKN,MAAME,YAAYjB,KAC9BC,SAAUoB,KAAKH,cAEf,kBAAC,EAAD,CAAW1B,MAAO6B,KAAKN,MAAMvB,MAC7Be,WAAac,KAAKd,WAClBJ,OAAQkB,KAAKlB,SACb,4BAAQN,KAAK,UAAb,oB,GApFgBmC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a0c024a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listItem.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nexport default function listItem(prpos){\r\n\r\n    const items = prpos.items ;\r\n    const listItems = items.map(item =>\r\n    {\r\nreturn <div className=\"list\" key={item.key}>\r\n    <p>\r\n    <input type=\"text\" \r\n    id={item.key} \r\n    value={item.text}\r\n    onChange={\r\n        (e) =>{\r\n            prpos.upDate(e.target.value, item.key)\r\n            }\r\n    }/>\r\n    <span>\r\n        <FontAwesomeIcon  icon='trash'\r\n        onClick={() => prpos.deleteItem(item.key)} />\r\n    </span>\r\n    </p>\r\n</div>\r\n    })\r\n    return(\r\n        <div>\r\n            <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n            </FlipMove>\r\n            </div>\r\n    )\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport ListItems from './component/listItem';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      isSwitchOn: false,\n      items:[],\n      currentItem:{\n        text:\"\",\n        key:''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.upDate = this.upDate.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n    }\n    \n    \n    addItem(e){\n      e.preventDefault();\n      const newItem = this.state.currentItem;\n      if(newItem.text !==\"\"){\n        const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n      }\n    }\n    \n    deleteItem(key){\n      const filteritems = this.state.items.filter(item => item.key !==key);\n      this.setState({\n        items:filteritems\n      })\n    }\n    \n    upDate(text, key){\n      const items =  this.state.items;\n      items.map(item =>{\n        if(item.key===key){\n          item.text=text;\n        }\n        this.setState({\n      items:items\n        })\n      })\n    }\n  render(){\n    const isOn = this.state.isSwitchOn;\n    return(\n      <>\n      <div className=\"contact\">\n      <div className= { isOn ? \"light-mode\" : \"dark-mode\"}>\n        <div>\n        <button className={isOn ? \"text-black modeBtn\" : \"text-black modeBtn\"} \n          onClick={() => this.setState({isSwitchOn: !isOn})}  > \n          {isOn ? 'D' : 'N'}\n        </button>\n    \n        </div>\n\n      <div className=\"app\">\n<form className=\"form\" onSubmit={this.addItem}>\n\n  <input className=\"formIput\" type=\"text\"  placeholder=\"ADD TASK\" \n  value={this.state.currentItem.text}\n  onChange={this.handleInput}/>\n\n  <ListItems items={this.state.items}\n  deleteItem ={this.deleteItem}\n  upDate={this.upDate} />\n  <button type=\"submit\">Add New</button>\n\n</form>\n</div>\n</div>\n</div>\n      </>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}